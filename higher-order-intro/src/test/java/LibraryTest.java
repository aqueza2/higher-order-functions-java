/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.util.*;
import java.util.stream.Collectors;

import static org.junit.Assert.*;

public class LibraryTest {

//    @Test (expected = IllegalArgumentException.class)
//    public void removeEvenThrowsExceptionWhenNull() {
//        Library.removeEven(null);
//    }

//    @Test
//    public void removeEvenReturnsEmptyListWhenGivenEmptyList(){
//        //setup
//
//        //exercise
//        List<Integer> actual = Library.removeEven(Collections.emptyList());
//        //assert
//        assertTrue(actual.isEmpty());
//    }
//
//    @Test
//    public void removeEvenReturnsSameListGivenOneOdd () {
//
//        List<Integer> actual = Library.removeEven(Arrays.asList(1));
//
//        assertEquals(Arrays.asList(1), actual);
//    }
//
//    @Test
//    public void removeEvenReturnsEmptyListWHenGivenOneEven(){
//        List<Integer> actual = Library.removeEven(Arrays.asList(2));
//
//        assertTrue(actual.isEmpty());
//    }
//
//    @Test
//    public void removeEvenReturnsFilteredEvens(){
//        List<Integer> actual = Library.removeEven(Arrays.asList(0,1,2,3,4,5,6,7,8));
//
//        assertEquals(Arrays.asList(1,3,5,7), actual);
//    }

//    @Test (expected = IllegalArgumentException.class)
//    public void pluckReturnNullWhenTheListIsNull() {
//        Library.pluck(null, "foo");
//    }
//
//    @Test
//    public void pluckReturnsEmptyListWhenEmptyListIsGiven(){
//        List<String> actual = Library.pluck(Collections.emptyList(), "foo");
//
//        assertTrue(actual.isEmpty());
//    }
//    @Test
//    public void pluckReturnsTheValueWhenListHasOneElement() {
//        HashMap<String, String> myMap = new HashMap<>();
//        myMap.put("foo", "bar");
//
//        List<Map<String, String>> listMap = new ArrayList<>();
//        listMap.add(myMap);
//
//        List<String> actual = Library.pluck(listMap, "foo");
//
//        List<String> expected = Arrays.asList("bar");
//
//        assertEquals(actual, expected);
//    }
//
//    @Test
//    public void pluckReturnsTheValuesWhenListHasMultiplePairElements() {
//        Map<String, String> myMap = new HashMap<>();
//        myMap.put("foo", "bar");
//        myMap.put("flu","season");
//        myMap.put("James","Bond");
//
//
//        List<Map<String, String>> listMap = new ArrayList<>();
//        listMap.add(myMap);
//        Map<String, String> myMap2 = new HashMap<>();
//
//        myMap2.put("James","Smith");
//        listMap.add(myMap2);
//
//
//        System.out.println("mymap is " + myMap);
//        System.out.println("listmap is " + listMap);
//        List<String> actual = Library.pluck(listMap, "James");
//
//        List<String> expected = Arrays.asList("Bond", "Smith");
//
//        assertEquals(expected, actual);
//    }
//
//    @Test
//    public void pluckReturnsEmptyListIfKeyNotFound() {
//        Map<String, String> myMap = new HashMap<>();
//        myMap.put("foo", "bar");
//        myMap.put("flu","season");
//        myMap.put("James","Bond");
//
//        List<Map<String, String>> listMap = new ArrayList<>();
//        listMap.add(myMap);
//
//        Map<String, String> myMap2 = new HashMap<>();
//        myMap2.put("James","Smith");
//
//        listMap.add(myMap2);
//
//        List<String> actual = Library.pluck(listMap, "Angela");
//
//        List<String> expected = Collections.emptyList();
//
//        assertEquals(expected, actual);
//
//    }

    @Test (expected = IllegalArgumentException.class)
    public void joinThrowsExceptionWhenNull(){
        Library.join(null,"");
    }

    @Test
    public void joinReturnsEmptyStringWhenGivenEmptyArray(){
        String actual = Library.join(new ArrayList<String>(),"");
        assertTrue(actual.isEmpty());
    }

    @Test
    public void joinReturnsAGivenString(){
        ArrayList<String> myArr = new ArrayList<String>();
        myArr.add("test");
        String actual = Library.join(myArr,"");
        String expected = "test";
        assertEquals(actual, expected);
    }

}
